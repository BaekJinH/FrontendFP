[
  { 
    "id": 1, 
    "content": "useEffect", 
    "link": "#link1", 
    "image": "../image/bubble_code_1.png", 
    "innerContent": [
      "<p>useEffect는 리액트의 훅 중 하나로, 컴포넌트가 렌더링될 때 특정 작업을 수행할 수 있도록 합니다. 이 훅은 주로 데이터 페칭, 구독 설정, DOM 업데이트 등과 같은 부수 효과(side effects)를 처리하는 데 사용됩니다.</p>",
      "<p>사용 시기: 컴포넌트가 처음 마운트될 때 데이터를 가져와야 할 때. 컴포넌트가 업데이트될 때 특정 작업을 수행해야 할 때. 컴포넌트가 언마운트될 때 정리(cleanup) 작업을 수행해야 할 때.</p>",
      "<p>사용 이유: useEffect를 사용하면 클래스 컴포넌트의 componentDidMount, componentDidUpdate, componentWillUnmount를 대체할 수 있습니다. 코드가 더 간결하고 이해하기 쉬워집니다.</p>"
    ]
  },

  { 
    "id": 2, 
    "content": "useContext", 
    "link": "#link2", 
    "image": "../image/bubble_code_2.png", 
    "innerContent":[
      "<p>useContext는 리액트의 컨텍스트 API를 사용하여 컴포넌트 트리 전체에 걸쳐 전역 상태를 관리할 수 있도록 합니다. 컨텍스트는 주로 테마, 사용자 정보, 인증 상태 등과 같은 전역 데이터를 관리하는 데 사용됩니다.</p>",
      "<p>사용 시기: 여러 컴포넌트에서 동일한 데이터를 공유해야 할 때. 컴포넌트 트리의 깊은 곳에 있는 컴포넌트에 데이터를 전달해야 할 때.</p>",
      "<p>사용 이유: useContext를 사용하면 props drilling을 피할 수 있습니다. 즉, 중간 컴포넌트에 불필요한 props를 전달하지 않아도 됩니다. 전역 상태를 쉽게 관리하고 접근할 수 있습니다.</p>"  
    ]
  },
  { 
    "id": 3, 
    "content": "useReducer", 
    "link": "#link3", 
    "image": "../image/bubble_code_3.png", 
    "innerContent": [
      "<p>useReducer는 리액트의 훅 중 하나로, 복잡한 상태 로직을 관리할 때 유용합니다. 이 훅은 리듀서 함수와 상태의 초기값을 받아 현재 상태와 상태를 업데이트하는 디스패치 함수를 반환합니다.</p>",
      "<p>사용 시기: 상태 업데이트 로직이 복잡하고 여러 상태가 관련되어 있을 때. 상태 업데이트가 여러 단계로 이루어질 때.</p>" ,
      "<p>사용 이유: useReducer는 useState보다 더 복잡한 상태 로직을 명확하게 표현할 수 있습니다.</p>",
      "<p>상태 업데이트 로직을 컴포넌트 외부로 분리하여 코드의 가독성을 높일 수 있습니다.</p>" 
    ]
  },
      
  { 
    "id": 4, 
    "content": "useRef", 
    "link": "#link4", 
    "image": "../image/bubble_code_4.png", 
    "innerContent": [
      "<p>useRef는 리액트의 훅 중 하나로, DOM 요소에 직접 접근하거나 컴포넌트 인스턴스의 특정 값을 저장하는 데 사용됩니다. useRef는 변경 가능한 ref 객체를 반환하며, 이 객체의 .current 속성을 통해 실제 DOM 노드에 접근할 수 있습니다.</p>",
      "<p>사용 시기: 특정 DOM 요소에 직접 접근해야 할 때. 컴포넌트의 렌더링 사이클에 영향을 주지 않고 값을 저장해야 할 때.</p>",
      "<p>사용 이유: useRef를 사용하면 DOM 요소에 직접 접근하여 포커스 설정, 텍스트 선택, 스크롤 위치 조정 등의 작업을 수행할 수 있습니다.</p>",
      "<p>상태를 저장하지만, 상태 변경이 컴포넌트를 리렌더링하지 않도록 할 수 있습니다.</p>"
    ]
  },
  { 
    "id": 5, 
    "content": "useMemo", 
    "link": "#link5", 
    "image": "../image/bubble_code_5.png", 
    "innerContent":[
      "<p>useMemo는 리액트의 훅 중 하나로, 복잡한 계산의 결과를 메모이제이션하여 성능을 최적화할 수 있습니다. 이 훅은 의존성 배열의 값이 변경되지 않는 한 이전에 계산된 값을 반환합니다.</p>",
      "<p>사용 시기: 계산 비용이 높은 작업이 있을 때. 동일한 입력에 대해 동일한 결과를 반환하는 순수 함수가 있을 때.</p>",
      "<p>사용 이유: useMemo를 사용하면 불필요한 계산을 피하고, 성능을 최적화할 수 있습니다.</p>",
      "<p>컴포넌트가 리렌더링될 때마다 동일한 계산을 반복하지 않도록 할 수 있습니다.</p>"
    ]
  },
  { 
    "id": 6, 
    "content": "useLayoutEffect", 
    "link": "#link6", 
    "image": "../image/bubble_code_6.png", 
    "innerContent":[
      "<p>useLayoutEffect는 useEffect와 유사하지만, DOM 업데이트 후에 동기적으로 실행됩니다. 이 훅은 레이아웃 측정이나 DOM 조작이 필요한 경우에 사용됩니다.</p>",
      "<p>사용 시기: DOM이 변경된 후에 레이아웃을 측정해야 할 때. DOM 조작이 필요하고, 그 결과가 화면에 즉시 반영되어야 할 때.</p>",
      "<p>사용 이유: useLayoutEffect를 사용하면 DOM 업데이트 후에 즉시 실행되어 레이아웃 측정이나 DOM 조작을 수행할 수 있습니다.</p>",
      "<p>useEffect보다 먼저 실행되므로, 레이아웃 측정이 필요한 경우에 적합합니다.</p>" 
    ]
  },
  { 
    "id": 7, 
    "content": "useImperativeHandle", 
    "link": "#link7", 
    "image": "../image/bubble_code_7.png", 
    "innerContent":[
      "<p>useImperativeHandle은 forwardRef와 함께 사용되어, 부모 컴포넌트가 자식 컴포넌트의 인스턴스 메서드를 호출할 수 있도록 합니다. 이 훅은 주로 커스텀 인스턴스 메서드를 정의하는 데 사용됩니다.</p>",
      "<p>사용 시기: 부모 컴포넌트가 자식 컴포넌트의 특정 메서드를 호출해야 할 때. 자식 컴포넌트의 내부 구현을 외부에 노출하지 않고, 특정 기능만 노출하고 싶을 때.</p>",
      "<p>사용 이유: useImperativeHandle을 사용하면 컴포넌트의 내부 구현을 캡슐화하면서도 필요한 기능을 외부에 노출할 수 있습니다.</p> ",
      "<p>컴포넌트의 인스턴스 메서드를 커스터마이즈하여, 부모 컴포넌트가 이를 호출할 수 있도록 할 수 있습니다.</p>" 
    ]
  }
]
